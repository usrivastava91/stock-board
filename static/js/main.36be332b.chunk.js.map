{"version":3,"sources":["store/reducers.js","store/store.js","components/stockRow.js","components/dashboard.js","store/actions.js","components/EnableUnsafescript.js","App.js","serviceWorker.js","index.js"],"names":["initState","stocks","rootReducer","state","arguments","length","undefined","action","type","stockObj","currentTime","payload","time","forEach","element","stockName","stockVal","oldStock","lastUpdated","status","difference","value","Object","objectSpread","storeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","StockRow","props","react_default","a","createElement","TableRow_default","className","TableCell_default","concat","TrendingDown_default","TrendingFlat_default","TrendingUp_default","align","stockPrice","durationPassed","ConnectedDashboard","componentDidMount","_this","connection","WebSocket","onmessage","getAllStock","stocksArr","JSON","parse","data","Date","getTime","getStocks","this","Card_default","Table_default","TableHead_default","TableBody_default","keys","map","index","toFixed","Math","round","stockRow","key","React","Component","Dashboard","connect","EnableUnsafescript","App","hasError","components_EnableUnsafescript","dashboard","error","Boolean","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36be332b.chunk.js","sourcesContent":["const initState = {\n    stocks: {}\n}\n\n const rootReducer = (state = initState, action) => {\n\n    switch (action.type) {\n        case ('GET_STOCKS'):\n            let stockObj = {};\n            //Getting the time from App component as payload to maintain the purity of the Reducer ( Redux Principles FTW!!)\n            let currentTime = action.payload.time;\n            action.payload.stocks.forEach(element => {\n                let stockName = element[0];\n                let stockVal = element[1];\n                let oldStock = state.stocks[stockName];\n                let lastUpdated = 0;\n                let status = 'same';\n                if(oldStock) {\n                    let difference = stockVal - oldStock.value;\n                    lastUpdated = currentTime - oldStock.time ;\n                    if(difference > 0){\n                        status = 'rise'\n                    } \n                    else if(difference < 0) {\n                        status = 'fall'\n                    }\n                    else {\n                        status = 'same'\n                    }\n                }\n                stockObj[stockName] = {value: element[1], time: currentTime, status: status, lastUpdated: lastUpdated }\n            });\n\n\n        \n            return { ...state, stocks: {...state.stocks, ...stockObj} }\n\n    }\n     \n    \n    return state;\n}\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    rootReducer,\n    storeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;\n","//React imports\nimport React from 'react';\n\n//Material UI components imports\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TrendingDown from '@material-ui/icons/TrendingDown';\nimport TrendingFlat from '@material-ui/icons/TrendingFlat';\nimport TrendingUp from '@material-ui/icons/TrendingUp';\n//MISC\nimport './component-styles.css'\n\nconst StockRow = ((props) => {\n    // Getting the status to apply appropriate conditional styling\n    var status = props.status;\n    return ( <TableRow className = 'font-robot-mono' >\n                <TableCell className = {\n                    `${status === 'rise' ? 'green': ''}\n                    ${status === 'fall' ? 'red': ''}\n                    ${status === 'same' ? '': ''}`\n                }> {props.stockName}\n                <div>\n                    <TrendingDown className = {`${status === 'fall' ? 'visible': 'hidden'}`}/>\n                    <TrendingFlat className = {`${status === 'same'? 'visible': 'hidden'}`}/>\n                    <TrendingUp  className = {`${status === 'rise'? 'visible': 'hidden'}`}/>\n                </div>\n                </TableCell> \n                <TableCell align = 'right'> {\n                    props.stockPrice\n                }</TableCell> \n                <TableCell align = 'right'> {\n                    props.durationPassed\n                } \n                </TableCell> \n            </TableRow>\n    )\n})\n\nexport default StockRow;","//React imports\nimport React from 'react';\n\n//Material UI Component imports\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Card from '@material-ui/core/Card';\n\n//Redux imports\nimport { connect } from 'react-redux';\nimport { getStocks } from '../store/actions'\n\n//MISC\nimport './component-styles.css';\nimport StockRow from './stockRow';\n\n//Mapping the state to a prop, making it accessible to the component.\nconst mapStateToProps = state => {\n    return { stocks: state.stocks }\n};\n\nclass ConnectedDashboard extends React.Component {\n\n    // Establishing connection with the websocket.\n    componentDidMount = () => {\n        this.connection = new WebSocket('ws://stocks.mnet.website');\n        this.connection.onmessage = this.getAllStock;\n    }\n\n    // Dispatching the action( getSockets) with the data recieved from the websocket, to update the state.\n    getAllStock = (stocks) => {\n        var stocksArr = JSON.parse(stocks.data);\n        let currentTime = new Date().getTime();\n        this.props.getStocks(stocksArr, currentTime );\n    }\n\n    //Passing the updated Stocks data from the state to the component.\n    render() {\n        var stocks = this.props.stocks;  \n        return (\n            <div className='container-div' >\n                <Card className='card' >\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell className='header'>Stocks</TableCell>\n                                <TableCell className='header' align='right'>Prices</TableCell>\n                                <TableCell className='header' align='right'>Updated</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {/* Segregating the properties from the stock to render them. */}\n                            {Object.keys(stocks).map((stockName, index) => {\n                                let stockPrice = (stocks[stockName].value).toFixed(2);\n                                let lastUpdated = stocks[stockName].lastUpdated/1000; //(converting milliseconds to seconds)\n                                let status = stocks[stockName].status;\n                                let durationPassed = lastUpdated < 60 ? Math.round(lastUpdated) + ' seconds ago': 'A few minutes ago'\n                                return (\n                                    <StockRow key={index} stockName={stockName}\n                                        stockPrice={stockPrice}\n                                        durationPassed={durationPassed}\n                                        status={status}\n                                    />\n                                )\n                            })}\n                        </TableBody>\n                    </Table>\n                </Card>\n            </div>\n\n        );\n    }\n}\n\nconst Dashboard = connect(mapStateToProps, { getStocks })(ConnectedDashboard);\n\nexport default Dashboard;","export const getStocks = (stocks, time)=>{\n    return { type: 'GET_STOCKS', payload: {stocks, time} }\n};","//React imports\nimport React from 'react'\n\n//Material UI components imports\nimport Card from '@material-ui/core/Card';\n\n//MISC\nimport './component-styles.css';\n\nconst EnableUnsafescript = props => {\n    return (\n        <div className='container-div'>\n            <Card className='enable-script-prompt'>\n                <p>Please allow unsafe scripts to run on the browser </p>\n                <p>(It's the shield icon on your url bar)</p>\n            </Card>\n        </div>\n    );\n}\n\nexport default EnableUnsafescript;","//React imports\nimport React from 'react';\n\n//MISC\nimport './App.css';\nimport Dashboard from './components/dashboard';\nimport EnableUnsafescript from './components/EnableUnsafescript';\n\nclass App extends React.Component {\n\n  state = {\n    hasError: false\n  }\n\n  // In case of error, updating the local component state.\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  render() {\n    //If error occured, render fallback UI.\n    if (this.state.hasError) {\n      return <EnableUnsafescript />;\n    }\n    return (\n      <Dashboard />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//React imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n//Redux imports\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\n//MISC\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store = { store }><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}